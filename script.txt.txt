Init
Git init is used to initialise a git repository
 
It creates the repository in the folder directory GitBash was opened in
It also creates a new folder as a hidden item
 
This .git folder indicates that this is the folder where the repository was created. 
Add
Git add sends files to the “staging area”. In this area, they are prepared to be committed. Add should be used anytime a file has been updated by the user and hasn’t been updated in the repository. This includes any new files introduced, and any previous files that have been updated.
The user can specify any file within their folder by typing the filename after “git add”, and they can add all files in the folder by using a “.”
 
 
Status
Git status is used to display the current status of files in the source folder and the staging area. It will display what files are yet to be added and which files are yet to be committed. A red file is one that hasn’t been added to the staging area yet, while green files are files that exist in the staging area, but are yet to be committed. Git status should be used following any add or commit done by the user to verify the process has been completed correctly.
 

Commit
Git commit is used to fully introduce a file from the staging area into the repository. As stated previously, a git status will show uncommitted files as green. Committed files won’t appear when a git status is called, a signal that the commit was successful. Unliked an add, however, a commit must come with a message. The line must read “git commit -m “<commit title>”. This means that when the commit is viewed in the repository, there is a title included. If this is not done, git will open up VI, a program that is much harder to use than a “-m” function.
 
Remote
Git remote creates a remote version of a repository. This version of a repository is common among multiple coders, and will be held on an online host like GitHub, or a more private host for a large corporation. While the users will have a local repository to work on, they must push their changes up to the remote, even if those changes are committed to the local repository. A remote is added with the command “git remote add origin remote_directory_url” This version of the repository is updated by multiple users separately, and as such is used for working in a group.
 

Push
Git push is used to push up the local changes to a repository to the associated remote. The -u function must be used in order to associate the push request with the remote the changes are being pushed to. A push must always be done when git is being closed for the day, so as to protect the files being used. Pushes should also be done often so that, in the event of something like a crash, the minimum amount of work is lost.
 

Branch
Git branch creates a new branch in the local repository where files can be added. A branch is a string of nodes that acts parallel to the main or master branch. A new branch can be made with the “git branch <branchname>” command. This new branch can be swapped to using the checkout command, and can now add and commit files to this branch. When this branch is pushed to the remote, it will be prompted to merge with the main branch. 
 

Checkout
Git checkout is used to swap between nodes and branches. It can be used to change which node or branch is being updated with files.  The command “git checkout <node or branch>” is used to swap the section being used. It can also be used to create new branches with “git checkout -b <branch name>”. 
 
 

Merge
The merge function in git is used to merge 2 branches together. This function is useful for re-incorporating parallel developments to a project but must be done with caution. If there is a conflict in the merge, like two identical variable names, the merge is stopped. The merge is done by git applying the commits done to the parallel branch to the branch being merged into. If conflict occurs, --abort walks back the merge, while --continue keep it going. This function is used often to ensure a common project. It must also be done regularly for small changes, to prevent a massive merge that results in far too many conflicts than can reasonably fixed.
 
